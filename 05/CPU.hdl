// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A or C instruction pattern:
    // if A: cccc cccc cccc cccc
    // if C: i xx a ccc ccc ddd jjj
    
    // destination bits structure:
    // ddd = ADM

    // split instruction into control-bits
    Mux16(a=instruction, b=false, sel=false,
            out[15]=i,
            out[13..14]=x,
            out[12]=a,
            out[11]=c6,
            out[10]=c5,
            out[9]=c4,
            out[8]=c3,
            out[7]=c2,
            out[6]=c1,
            out[5]=dA,
            out[4]=dD,
            out[3]=dM,
            out[2]=j3,
            out[1]=j2,
            out[0]=j1, out=inst);

    // if dA is set => let ALUout through
    Not(in=i, out=noti);
    And(a=i, b=dA, out=useALUout);
    // if C-inst and dA is set
    // => let ALUout through
    // else => let instruction through
    Mux16(a=inst, b=ALUout, sel=useALUout, out=inOrALU);
    // if inOrALU is either:
    // - C-instruction && dA ist set; or
    // - it's an A-instruction;
    // => write it into A
    Or(a=useALUout, b=noti, out=loadA);
    ARegister(in=inOrALU, load=loadA, out[0..14]=addressM, out=A);

    // determine whether ALU uses A or M (if C-inst and a => use M)
    And(a=i, b=a, out=useM);
    Mux16(a=A, b=inM, sel=useM, out=AorM);

    // set up ALU (with inst-c-bits)
    ALU(x=D, y=AorM,
        zx=c6,
        nx=c5,
        zy=c4,
        ny=c3,
        f=c2,
        no=c1,
        out=ALUout, out=outM, // outputs of ALU
        zr=z, ng=n); // c-bits of ALU

    // if C-inst and d-bit for D is set => write to D
    And(a=i, b=dD, out=loadD);
    DRegister(in=ALUout, load=loadD, out=D);

    // if C-inst and d-bit for M is set => write to M
    And(a=i, b=dM, out=iAnddM);
    Mux(a=false, b=true, sel=iAnddM, out=writeM);

    // Jump logic
    And(a=j1, b=j2, out=j1andj2);
    And(a=j1, b=j3, out=j1andj3);
    And(a=j2, b=j3, out=j2andj3);
    And(a=j1andj2, b=j3, out=j1andj2andj3);

    Not(in=z, out=notZero);
    Not(in=n, out=notNeg);
    And(a=notZero, b=notNeg, out=GT);
    Or(a=z, b=notNeg, out=GE);
    Or(a=z, b=n, out=LE);

    And(a=j1, b=GT, out=JGT);
    And(a=j2, b=z, out=JEQ);
    And(a=j1andj2, b=GE, out=JGE);
    And(a=j3, b=n, out=JLT);
    And(a=j1andj3, b=notZero, out=JNE);
    And(a=j2andj3, b=LE, out=JLE);

    // the following JMP-logic is pretty much unnecessary. A much better implemention has been done by "ilstam"
    // his code can be found here: https://github.com/ilstam/nand2tetris/blob/master/projects/05/CPU.hdl
    Or(a=JGT, b=JEQ, out=GTorEQ);
    Or(a=GTorEQ, b=JGE, out=GTorEQorGE);
    Or(a=GTorEQorGE, b=JLT, out=GTorEQorGEorLT);
    Or(a=GTorEQorGEorLT, b=JNE, out=GTorEQorGEorLTorNE);
    Or(a=GTorEQorGEorLTorNE, b=JLE, out=GTorEQorGEorLTorNEorLE);
    Or(a=GTorEQorGEorLTorNEorLE, b=j1andj2andj3, out=AnyJump);
    
    // if any jmp in C-inst matches the ALU c-outputs => jump to address
    And(a=AnyJump, b=i, out=jump);
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}