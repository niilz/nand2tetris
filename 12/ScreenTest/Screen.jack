// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int base;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let base = 16384;
        let color = false;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767+1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int offset, value, div, bit;
        
        let offset = (32 * y) + (x / 16);
        let value = Memory.peek(base + offset);
        // Calculate the bit to change
        let div = x / 16;
        // bit is the modulo (so we subtract the multiplication of 16
        // with the rounded result of the interdivision of x/16 from x
        let bit = x - (16 * div);

        // If the color is black make an AND between the current value
        // and the bit to turn on
        // (e.g. 0110 1001) AND ()
        let value = Screen.setBit(bit, value);
        do Memory.poke(base + offset, value);
        return;
    }
    // Sets one bit
    function int setBit(int bit, int value) {
        var int bitMask;
        // Example for bit = 4: 0001 0000
        let bitMask = twoToThe[bit];
        if (color) {
            // Example for value = 1000 0001 => 1001 0001
            let value = value | bitMask;
        } else {
            // Example: bitMask 0001 0000 => bitMaskInversed 1110 1111
            let bitMask = ~bitMask;
            // Example for value = 1001 0001 => 1000 0001
            let value = value & bitMask;
        }
        return value;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // Set color to black
        let color = true;
        if ((x1 = x2) | (y1 = y2)) {
            do Screen.drawStraightLine(x1, y1, x2, y2);
        } else {
            // If user intended right to left
            // Invert the call
            if (x1 > x2) {
                do Screen.drawDiagonal(x2, y2, x1, y1);
            } else {
                // left to right (regular case)
                do Screen.drawDiagonal(x1, y1, x2, y2);
            }
        }
        return;
    }

    function void drawStraightLine(int x1, int y1, int x2, int y2) {
        var boolean down;
        var int start, end;
        // Vertical Line
        if (x1 = x2) {
            let start = Math.min(y1, y2);
            let end = Math.max(y1, y2);
            while (start < (end + 1)) {
                do Screen.drawPixel(x1, start);
                let start = start + 1;
            }
        } else {
            // Horizontal Line
            let start = Math.min(x1, x2);
            let end = Math.max(x1, x2);
            while (start < (end + 1)) {
                do Screen.drawPixel(start, y1);
                let start = start + 1;
            }
        }
        return;
    }

    function void drawDiagonal(int x1, int y1, int x2, int y2) {
        var int dx, dy, diff;
        var boolean down;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        let down = true;
        if (y1 > y2) {
            let down = false;
            let dy = y1 - y2;
        }
        if (down) {
            while ((x1 < (x2 + 1)) & (y1 < (y2 + 1))) {
                do Screen.drawPixel(x1, y1);
                if (diff < 1) {
                    let x1 = x1 + 1;
                    let diff = diff + dy;
                } else {
                    let y1 = y1 + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            while ((x1 < (x1 + 1)) & (y1 > (y2 - 1))) {
                do Screen.drawPixel(x1, y1);
                if (diff < 1) {
                    let x1 = x1 + 1;
                    let diff = diff + dy;
                } else {
                    let y1 = y1 - 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int line, lines;
        let lines = y2 - y1;
        let line = 0;
        while (line < lines) {
            do Screen.drawStraightLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
            let line = line + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, halfLine, x1, x2;
        // Handle overflow
        if (r > 181) { return; }
        // Top of Circle = -r
        let dy = -r;
        while (dy < 1) {
            // Horizontal distance from middle vertical line of circle
            // until it hits the circle outline. Get's calculated with
            // r^2 = dy^2 + halfLine^2 => halfLine^2 = r^2 - dy^2
            let halfLine = Math.sqrt((r * r) - (dy * dy));
            // Left x value (where line starts) is halfLine away from center.
            let x1 = x - halfLine;
            let x2 = x + halfLine;
            // Draw line in top half of the circle
            do Screen.drawStraightLine(x1, y + dy, x2, y + dy);
            // Draw line in bottom half of the circle
            do Screen.drawStraightLine(x1, y - dy, x2, y - dy);
            let dy = dy + 1;
        }
        return;
    }
}
